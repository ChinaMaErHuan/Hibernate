	1.Hibernate优点：
	
	　　（1）对象/关系数据库映射(Basic O/R Mapping)
	
	　　它使用时只需要操纵对象，使开发更对象化，抛弃了数据库中心的思想，完全的面向对象思想。
	
	　　（2）透明持久化(Persistent)
	
	　　带有持久化状态的、具有业务功能的单线程对象，此对象生存期很短。
		这些对象可能是普通的JavaBeans/POJO，这个对象没有实现第三方框架或者接口，
		唯一特殊的是他们正与（仅仅一个）Session相关联。一旦这个Session被关闭，
		这些对象就会脱离持久化状态，这样就可被应用程序的任何层自由使用。
		（例如，用作跟表示层打交道的数据传输对象。）
	
	　　（3）事务Transaction (org.Hibernate.Transaction)
	
	　　应用程序用来指定原子操作单元范围的对象，它是单线程的，生命周期很短。
		它通过抽象将应用从底层具体的JDBC、JTA以及CORBA事务隔离开。
		某些情况下，一个Session之内可能包含多个Transaction对象。
		尽管是否使用该对象是可选的，但无论是使用底层的API还是使用Transaction对象，
		事务边界的开启与关闭是必不可少的。
	
	　　（4）它没有侵入性，即所谓的轻量级框架。
	
	　　（5）移植性会很好。
	
	　　（6）缓存机制。提供一级缓存和二级缓存。
	
	　　（7）简洁的HQL编程。
	
	　　2.Hibernate缺点：
	
	　　（1）Hibernate在批量数据处理的时候是有弱势。
	
	　　（2）针对某一对象(单个对象)简单的查\改\删\增，不是批量修改、删除，适合用Hibernate；
		而对于批量修改、删除，不适合用Hibernate，这也是OR框架的弱点;要使用数据库的特定优化机制的时候，
		不适合用Hibernate。
		
		JDBC与Hibernate在性能上相比，JDBC灵活性有优势。而Hibernate在易学性，易用性上有些优势。当用到很多复杂的多表联查和复杂的数据库操作时，JDBC有优势。
	
	相同点：
	
	◆两者都是JAVA的数据库操作中间件。
	
	◆两者对于数据库进行直接操作的对象都不是线程安全的，都需要及时关闭。
	
	◆两者都可以对数据库的更新操作进行显式的事务处理。
	
	不同点：
	
	◆使用的SQL语言不同：JDBC使用的是基于关系型数据库的标准SQL语言，Hibernate使用的是HQL(Hibernate query language)语言
	
	◆操作的对象不同：JDBC操作的是数据，将数据通过SQL语句直接传送到数据库中执行，Hibernate操作的是持久化对象，由底层持久化对象的数据更新到数据库中。
	
	◆数据状态不同：JDBC操作的数据是“瞬时”的，变量的值无法与数据库中的值保持一致，而Hibernate操作的数据是可持久的，即持久化对象的数据属性的值是可以跟数据库中的值保持一致的。
	
	JDBC与Hibernate读取性能
	
	1、JDBC仍然是最快的访问方式，不论是Create还是Read操作，都是JDBC快。
	
	2、Hibernate使用uuid.hex构造主键，性能稍微有点损失，但是不大。
	
	3、Create操作，JDBC在使用批处理的方式下速度比Hibernate快，使用批处理方式耗用JVM内存比不使用批处理方式要多得多。
	
	4、读取数据，Hibernate的Iterator速度非常缓慢，因为他是每次next的时候才去数据库取数据，这一点从观察任务管理器的java进程占用内存的变化也可以看得很清楚，内存是几十K几十K的增加。
	
	5、读取数据，Hibernate的List速度很快，因为他是一次性把数据取完，这一点从观察任务管理器的java进程占用内存的变化也可以看得很清楚，内存几乎是10M的10M的增加。
	
	6、JDBC读取数据的方式和Hibernate的List方式是一样的（这跟JDBC驱动有很大关系，不同的JDBC驱动，结果会很不一样），这 从观察java进程内存变化可以判断出来，由于JDBC不需要像Hibernate那样构造一堆Cat对象实例，所以占用JVM内存要比 Hibernate的List方式大概少一半左右。
	
	7、Hibernate的Iterator方式并非一无是处，它适合于从大的结果集中选取少量的数据，即不需要占用很多内存，又可以迅速得到结果。另外Iterator适合于使用JCS缓冲。最终结论：
	
	由于MySQL的JDBC驱动的重大缺陷，使得测试结果变得毫无意义，不具备任何参考价值，只是我们能够大概判断出一些结论：
	
	一、精心编写的JDBC无论如何都是最快的。
	
	二、Hibernate List和Iterator适用的场合不同，不存在孰优孰劣的问题
	
	我个人认为Hibernate Iterator是JDBC Result的封装，Hibernate List是Scrollable Result的封装，所以我推测，如果在Oracle或者DB2上面做同样的Read测试，如果结果集小于FetchSize，4者在速度上应该都不会有 差别；如果结果集大于FetchSize的话，但是不是FetchSize的很多倍，速度排名应该是：
	
	JDBC Scrollable Result (消耗时间最少) < Hibernate List < JDBC Result < Hibernate Iterator
	
	如果结果集非常大，但是只取结果集中的部分记录，那么速度排名：
	
	JDBC Result < Hibernate Iterator < JDBC Scrollable Result < Hibernate List
		
	在这里整理一下Hibernate的优缺点，有不完整的地方希望大家指出。谢谢！

	先说一下Hibernate的优点：
	
	一、Hibernate优点：
	
	1、对象化。hibernate可以让开发人员以面相对象的思想来操作数据库。jdbc只能通过SQL语句将元数据传送给数据库，进行数据操作。而hibernate可以在底层对元数据和对象进行转化，使得开发者只用面向对象的方式来存取数据即可。
	
	2、更好的移植性。hibernate使用xml或JPA的配置以及数据库方言等等的机制，使得hibernate具有更好的移植性，对于不同的数据库，开发者只需要使用相同的数据操作即可，无需关心数据库之间的差异。而直接使用JDBC就不得不考虑数据库差异的问题。
	
	3、开发效率高。hibernate提供了大量的封装（这也是它最大的缺点），很多数据操作以及关联关系等都被封装的很好，开发者不需写大量的sql语句，这就极大的提高了开发者的开发效率。
	
	4、缓存机制的使用。hibernate提供了缓存机制（session缓存，二级缓存，查询缓存），对于那些改动不大且经常使用的数据，可以将它们放到缓存中，不必在每次使用时都去查询数据库，缓存机制对提升性能大有裨益。
	5.扩展性强
	 
	
	二、Hibernate的缺点：
	
	1、它对JDBC封装过于厉害，所以就失去了对SQL的控制（当然hibernate也可以使用native sql既使用createSQLQuery等方法来调用与数据库相关的sql，但这样一来也就影响了hibernate的可移植性），使得hibernate的在很多地方不够灵活，难于优化，尤其对于一些复杂的关联查询时，hibernate提供的功能远不及直接使用JDBC方便性能更高。
	
	2、hibernate没有提供专门的批处理机制，如果要批量更新或插入数据时，还需要显示的flush，clear之类的操作，性能不如JDBC。
	
	3、相对于JDBC，hibernate更消耗内存，因为它每次的数据库操作都要做数据和对象的转换/封装，查询出一条数据就要创建一个或多个对象，这样也太消耗内存了。
	
	4、hibernate提供了很多好处，但这些好处本身就是陷阱（如proxy陷阱等），开发者如果不注意就会调入陷阱而不知，这样就可能会出现一些无法排查的异常情况，比如程序表面上看着毫无错误，可就是达不到预期的效果，而且并无异常抛出，断点排查也不一定能找到症结所在，这将是非常令人抓狂的一件事！！！！！	